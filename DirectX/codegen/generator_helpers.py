#!/usr/bin/python

# ===================== begin_copyright_notice ============================
#
# Copyright (C) 2023-2025 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# ===================== end_copyright_notice ==============================

from intermediates import Api
from mako.template import Template
from datetime import datetime
import re
import os

AUTO_GENERATED_HEADER = f"""
//
// FILE AUTO-GENERATED BY THE GITS CODE GENERATOR. DO NOT MODIFY DIRECTLY.
// GENERATED ON: {datetime.now()}
//"""

def generate_return(function):
    str = ''
    if function.ret.is_const:
        str += 'const '
    str += function.ret.type
    if function.ret.is_pointer:
        str += '*'
    elif function.ret.is_pointer_to_pointer or function.ret.is_array or function.ret.is_array_of_arrays:
        print('ERROR param not handled: ' + function.ret)
    return str

def generate_params(function):
    list = []
    for param in function.params:
        str = ''
        if param.is_const:
            str += 'const '
        str += param.type
        if param.is_pointer:
            str += '*'
        elif param.is_pointer_to_pointer:
            str += '**'  
        elif param.is_array_of_arrays:
            print('ERROR param not handled: ' + param)
        str += ' ' + param.name
        if param.is_array:
            str += '[' + param.size + ']'
        list.append(str)
    return list


def generate_args(function):
    list = []
    for param in function.params:
        str = f'command.{param.name}_.value'
        list.append(str)
    return list


def is_interface_creation(function):
    creation = False
    for param in function.params:
        if param.is_interface_creation:
            creation = True
            break
    return creation

def is_context_creation(function):
    return any(param.is_context_output for param in function.params)

def generate_file(context, file_name, out_path):
    in_file = os.path.join("templates", os.path.basename(file_name) + ".mako")
    out_file = os.path.join(out_path, file_name)
    
    base_context = {
        'header': AUTO_GENERATED_HEADER,
        'Api': Api,
        'generate_return': generate_return,
        'generate_params': generate_params,
        'generate_args': generate_args,
        'is_interface_creation': is_interface_creation,
        'is_context_creation': is_context_creation
    }

    print('Generating file: ' + out_file)
    rendered = Template(filename = in_file).render(**(base_context | context))
    rendered = re.sub(r"\r\n", r"\n", rendered)
    with open(out_file, 'w') as file:
        file.write(rendered)

def generate_plugin_file(context, file_name, out_path):
    
    mako_script_path = os.path.realpath(out_path + "/codegen/templates/" + file_name + ".mako")
    artifact_file = os.path.realpath(out_path + "/" + file_name)
    
    base_context = {
        'header': AUTO_GENERATED_HEADER,
        'Api': Api,
        'generate_return': generate_return,
        'generate_params': generate_params,
        'generate_args': generate_args,
        'is_interface_creation': is_interface_creation,
        'is_context_creation': is_context_creation
    }

    print('Generating file: ' + artifact_file)
    rendered = Template(filename = mako_script_path).render(**(base_context | context))
    rendered = re.sub(r"\r\n", r"\n", rendered)
    with open(artifact_file, 'w') as file:
        file.write(rendered)