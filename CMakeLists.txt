# ===================== begin_copyright_notice ============================
#
# Copyright (C) 2023-2025 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# ===================== end_copyright_notice ==============================


cmake_minimum_required(VERSION 3.13)
project(gits)

find_package(Python3 3.10 REQUIRED COMPONENTS Interpreter)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set(CMAKE_SKIP_INSTALL_ALL_DEPENDENCY TRUE)

# build options
option(WITH_VULKAN "Build Vulkan component" ON)
if(WITH_VULKAN)
  add_definitions(-DWITH_VULKAN)
endif()

option(WITH_OPENCL "Build OpenCL component" ON)
if(WITH_OPENCL)
  add_definitions(-DWITH_OPENCL)
endif()

option(WITH_LEVELZERO "Build LevelZero component" ON)
if(WITH_LEVELZERO)
  add_definitions(-DWITH_LEVELZERO)
endif()

option(SKIP_THIRDPARTY_FETCH "Skip fetching third-party dependencies" OFF)
if(SKIP_THIRDPARTY_FETCH)
  add_definitions(-DSKIP_THIRDPARTY_FETCH)
endif()

if(WIN32 AND "${CMAKE_GENERATOR_PLATFORM}" MATCHES "x64")
  # DIRECTX enabled only on Windows x64
  option(WITH_DIRECTX "Build DIRECTX component" ON)
else()
  option(WITH_DIRECTX "Build DIRECTX component" OFF)
endif()
if(WITH_DIRECTX)
  add_definitions(-DWITH_DIRECTX)
endif()

option(WITH_OCLOC "Build Ocloc component" ON)
if(WITH_OCLOC)
  add_definitions(-DWITH_OCLOC)
endif()

option(OFFLINE_MODE "Offline mode" OFF)
if(OFFLINE_MODE)
  add_definitions(-DOFFLINE_MODE)
  message("Offline Mode: no download of third party libraries, assuming folders are prepopulated.")
endif()


execute_process(COMMAND ${Python3_EXECUTABLE} -c "import mako" RESULT_VARIABLE MAKO_IMPORT OUTPUT_QUIET ERROR_QUIET)
if(NOT MAKO_IMPORT EQUAL 0)
  message(FATAL_ERROR "Mako templates not installed. GITS requires Mako to generate files. Use 'pip install Mako' to install.")
endif()
execute_process(COMMAND ${Python3_EXECUTABLE} -c "import requests" RESULT_VARIABLE REQUESTS_IMPORT OUTPUT_QUIET ERROR_QUIET)
if(NOT REQUESTS_IMPORT EQUAL 0)
  message(FATAL_ERROR "requests not installed. GITS requires requests to install dependencies. Use 'pip install requests' to install.")
endif()
execute_process(COMMAND ${Python3_EXECUTABLE} -c "import retrying" RESULT_VARIABLE RETRYING_IMPORT OUTPUT_QUIET ERROR_QUIET)
if(NOT RETRYING_IMPORT EQUAL 0)
  message(FATAL_ERROR "retrying not installed. GITS requires retrying to install dependencies. Use 'pip install retrying' to install.")
endif()
execute_process(COMMAND ${Python3_EXECUTABLE} -c "import yaml" RESULT_VARIABLE YAML_IMPORT OUTPUT_QUIET ERROR_QUIET)
if(NOT YAML_IMPORT EQUAL 0)
  message(FATAL_ERROR "PyYAML not installed. GITS requires PyYAML to generate files. Use 'pip install -r requirements.txt' to install all required packages.")
endif()
if (WITH_DIRECTX)
  execute_process(COMMAND ${Python3_EXECUTABLE} -c "import cxxheaderparser" RESULT_VARIABLE CXXHEADERPARSER_IMPORT OUTPUT_QUIET ERROR_QUIET)
  if(NOT CXXHEADERPARSER_IMPORT EQUAL 0)
    message(FATAL_ERROR "cxxheaderparser not installed. GITS requires cxxheaderparser to generate files. Use 'pip install cxxheaderparser' to install.")
  endif()
endif()

if(WIN32)
  set(OpenGL_INSTALL_SUBDIR "FilesToCopyOGL" CACHE INTERNAL "")
  set(OpenGLES_INSTALL_SUBDIR "FilesToCopyES" CACHE INTERNAL "")
  set(OpenCL_INSTALL_SUBDIR "FilesToCopyOCL" CACHE INTERNAL "")
  set(Vulkan_INSTALL_SUBDIR "FilesToCopyVulkan" CACHE INTERNAL "")
  if (WITH_DIRECTX)
    set(DIRECTX_INSTALL_SUBDIR "FilesToCopyDirectX" CACHE INTERNAL "")
  endif()
  set(VulkanLayer_INSTALL_SUBDIR "VulkanLayer" CACHE INTERNAL "")
  set(L0_INSTALL_SUBDIR "FilesToCopyL0" CACHE INTERNAL "")
elseif(UNIX)
  set(OpenGL_INSTALL_SUBDIR "OpenGL" CACHE INTERNAL "")
  set(OpenGLES_INSTALL_SUBDIR "OpenGL" CACHE INTERNAL "")
  set(OpenCL_INSTALL_SUBDIR "OpenCL" CACHE INTERNAL "")
  set(Vulkan_INSTALL_SUBDIR "Vulkan" CACHE INTERNAL "")
  set(VulkanLayer_INSTALL_SUBDIR "VulkanLayer" CACHE INTERNAL "")
  set(L0_INSTALL_SUBDIR "LevelZero" CACHE INTERNAL "")
else()
  set(OpenGL_INSTALL_SUBDIR "." CACHE INTERNAL "")
  set(OpenGLES_INSTALL_SUBDIR "." CACHE INTERNAL "")
  set(OpenCL_INSTALL_SUBDIR "." CACHE INTERNAL "")
  set(Vulkan_INSTALL_SUBDIR "." CACHE INTERNAL "")
  set(VulkanLayer_INSTALL_SUBDIR "." CACHE INTERNAL "")
  set(L0_INSTALL_SUBDIR "." CACHE INTERNAL "")
endif()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG")
set(CLANG_COMPILER CMAKE_CXX_COMPILER_ID STREQUAL "Clang")

if(UNIX AND NOT ARCH STREQUAL "-march=armv8-a")
  add_definitions(-msse4.2)
endif()

if(NOT MSVC)
  add_definitions(-Wall -Wno-unused-function -Wno-system-headers -Wno-write-strings -Wno-format -fno-strict-aliasing -fPIC -Doverride= "${ARCH}")
endif()

include(custom_functions)

if(UNIX)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-overloaded-virtual -Wno-unused-variable -Wno-conversion-null -Wno-pointer-arith -Wno-switch -Wno-deprecated-declarations -Werror")
elseif(MSVC)
  add_definitions(-D_CRT_SECURE_NO_WARNINGS -DWIN32_LEAN_AND_MEAN -DNOMINMAX -D_SILENCE_CXX17_SHARED_PTR_UNIQUE_DEPRECATION_WARNING)
  add_compile_options(/MP /W3 /wd4005 /wd4065 /wd4100 /wd4480 /wd4481 /wd4482 /wd4503 /wd4505 /wd4611 /wd4702 /wd4800 /wd4244 /wd4267 /wd4312 /bigobj)
  add_compile_options("/MT$<$<CONFIG:Debug>:d>")
  add_compile_options("$<$<NOT:$<CONFIG:Debug>>:/GS->")
  add_link_options(/DYNAMICBASE:NO /LARGEADDRESSAWARE /FIXED:NO)
  add_link_options("$<$<NOT:$<CONFIG:DEBUG>>:/OPT:REF>")
endif()

if(NOT MSVC AND NOT CLANG_COMPILER)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wl,--no-undefined")
endif()

if(NOT MSVC)
  # libpng needs to be built as c
  add_definitions(-fvisibility=hidden)
endif()

include(import_zlib)
include(import_libpng)
include(import_lua)
include(import_xxhash)
if (MSVC)
  include(import_stackwalker)
endif()
include(import_clheaders)
if(WITH_DIRECTX)
  include(import_detours)
  include(import_directxtex)
  include(import_xess)
  include(import_agilitysdk)
  include(import_dxc)
  include(import_directml)
  include(import_directstorage)
  include(import_fastio)
  include(import_nvapi)
endif()
include(import_murmurhash)
include(import_renderdoc)
include(import_json)
include(import_yamlcpp)
include(import_lz4)
include(import_zstd)
include(import_argshxx)
include(import_imgui)
include(import_intel_one_mono)
include(import_plog)

if(WIN32)
  set(PLTFRM "win32")
else()
  if(${ARCH} STREQUAL "-m32")
    set(PLTFRM "lnx_32")
  elseif(${ARCH} STREQUAL "-m64")
    set(PLTFRM "lnx_64")
  else()
    set(PLTFRM "lnx_arm")
  endif()
endif()
set(PLATFORM ${PLTFRM} CACHE INTERNAL "Platform string")

if(WITH_VULKAN)
  include_directories(Vulkan/interceptor/include)
  include_directories(Vulkan/common/include)
  include_directories(Vulkan/recorder/include)
  add_subdirectory(Vulkan)
endif()
if(WITH_OPENCL)
  include_directories(OpenCL/interceptor/include)
  include_directories(OpenCL/common/include)
  include_directories(OpenCL/recorder/include)
  add_subdirectory(OpenCL)
endif()
if(WITH_LEVELZERO)
  include_directories(LevelZero/interceptor/include)
  include_directories(LevelZero/common/include)
  include_directories(LevelZero/recorder)
  add_subdirectory(LevelZero)
  if(WITH_OPENCL)
    add_dependencies(L0_common OpenCL_codegen)
  endif()
endif()
if(WITH_OCLOC)
  include_directories(ocloc/interceptor/include)
  include_directories(ocloc/common/include)
  include_directories(ocloc/recorder)
  add_subdirectory(ocloc)
endif()

add_subdirectory(common)
add_subdirectory(OpenGL)
add_subdirectory(player)
add_subdirectory(recorder)
if(WITH_DIRECTX)
  add_subdirectory(DIRECTX)
endif()

if(ARCH AND NOT MSVC)
  set_target_properties(gits_player PROPERTIES LINK_FLAGS ${ARCH})
  set_target_properties(gits_recorder PROPERTIES LINK_FLAGS ${ARCH})
  set_target_properties(OpenGL_interceptor PROPERTIES LINK_FLAGS ${ARCH})
  if(WITH_OPENCL)
    set_target_properties(OpenCL_interceptor PROPERTIES LINK_FLAGS ${ARCH})
  endif()
endif()
if(WITH_VULKAN AND NOT MSVC)
  set_target_properties(Vulkan_interceptor PROPERTIES LINK_FLAGS ${ARCH})
  set_target_properties(Vulkan_layer PROPERTIES LINK_FLAGS ${ARCH})
endif()
if(WITH_LEVELZERO AND NOT MSVC)
  set_target_properties(L0_interceptor PROPERTIES LINK_FLAGS ${ARCH})
endif()
if(WITH_OCLOC AND NOT MSVC)
  set_target_properties(ocloc_interceptor PROPERTIES LINK_FLAGS ${ARCH})
endif()

install(DIRECTORY Scripts/Lua/ DESTINATION LuaScripts)

# CCode installation
install(DIRECTORY CCodeFiles/src/ DESTINATION CCode/CCodeSource)
install(DIRECTORY common/configuration DESTINATION CCode)
install(FILES Scripts/install_dependencies.py DESTINATION CCode/Scripts/)
install(DIRECTORY third_party/patch/zlib DESTINATION CCode/third_party/patch)
install(DIRECTORY third_party/patch/libpng DESTINATION CCode/third_party/patch)
install(DIRECTORY third_party/patch/argshxx DESTINATION CCode/third_party/patch)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/custom_functions.cmake DESTINATION CCode/cmake)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/import_zlib.cmake DESTINATION CCode/cmake)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/import_libpng.cmake DESTINATION CCode/cmake)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/import_xxhash.cmake DESTINATION CCode/cmake)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/import_clheaders.cmake DESTINATION CCode/cmake)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/import_murmurhash.cmake DESTINATION CCode/cmake)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/import_lz4.cmake DESTINATION CCode/cmake)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/import_zstd.cmake DESTINATION CCode/cmake)
install(FILES CCodeFiles/CMakeLists.txt DESTINATION CCode)
if(WIN32)
  install(FILES CCodeFiles/build_ccode.bat DESTINATION CCode)
elseif(UNIX)
  install(FILES CCodeFiles/build.linux DESTINATION CCode)
endif()
if(WIN32)
  if(WITH_VULKAN)
    if("${CMAKE_GENERATOR_PLATFORM}" MATCHES "Win32")
	  set(PLATFORM Win32)
	else()
	  set(PLATFORM x64)
	endif()
    set(INSTALL_GITS_VK_LAYER ${CMAKE_CURRENT_SOURCE_DIR}/Scripts/Installer/install_vulkan_layer.bat)
	set(LAYER_DLL_PATH "Recorder\\\\${VulkanLayer_INSTALL_SUBDIR}")
    install(CODE "execute_process(COMMAND cmd /c \"${INSTALL_GITS_VK_LAYER}\" \"${PLATFORM}\" \"\${CMAKE_INSTALL_PREFIX}\\\\${LAYER_DLL_PATH}\\\\\")")
  endif()
endif()

set(GITS_CONFIG "gits_config.yml")
set(CONFIG_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/Config")
set(CONFIG_COMPUTE_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/Config/Compute")

set(CONFIG_DEFAULT_OUTPUT "${CONFIG_OUTPUT}/${GITS_CONFIG}")
set(CONFIG_COMPUTE_DEFAULT_OUTPUT "${CONFIG_COMPUTE_OUTPUT}/${GITS_CONFIG}")

if(WIN32)
  set(PLATFORM "win32")
else()
  if(${ARCH} STREQUAL "-m32")
    set(PLATFORM "lnx_32")
  elseif(${ARCH} STREQUAL "-m64")
    set(PLATFORM "lnx_64")
  else()
    set(PLATFORM "lnx_arm")
  endif()
endif()

if(SKIP_INSTALL_PATH)
install(CODE "execute_process(COMMAND \"${Python3_EXECUTABLE}\" \"${CONFIG_GENERATOR}\" --platform ${PLATFORM} --installpath \"skip\" \
  --step DefaultConfiguration --configYML \"${METAFILE_CONFIG}\" --enumYML \"${METAFILE_ENUM}\" --outDir \"${CONFIG_OUTPUT}\")")
install(CODE "execute_process(COMMAND \"${Python3_EXECUTABLE}\" \"${CONFIG_GENERATOR}\" --platform ${PLATFORM} --installpath \"skip\" \
  --compute  --step DefaultConfiguration --configYML \"${METAFILE_CONFIG}\" --enumYML \"${METAFILE_ENUM}\" --outDir \"${CONFIG_COMPUTE_OUTPUT}\")")
else()
install(CODE "execute_process(COMMAND \"${Python3_EXECUTABLE}\" \"${CONFIG_GENERATOR}\" --platform ${PLATFORM} --installpath \"\${CMAKE_INSTALL_PREFIX}\" \
  --step DefaultConfiguration --configYML \"${METAFILE_CONFIG}\" --enumYML \"${METAFILE_ENUM}\" --outDir \"${CONFIG_OUTPUT}\")")
install(CODE "execute_process(COMMAND \"${Python3_EXECUTABLE}\" \"${CONFIG_GENERATOR}\" --platform ${PLATFORM} --installpath \"\${CMAKE_INSTALL_PREFIX}\" \
  --compute --step DefaultConfiguration --configYML \"${METAFILE_CONFIG}\" --enumYML \"${METAFILE_ENUM}\" --outDir \"${CONFIG_COMPUTE_OUTPUT}\")")
endif(SKIP_INSTALL_PATH)

install(FILES ${CONFIG_DEFAULT_OUTPUT} DESTINATION Recorder/${OpenGL_INSTALL_SUBDIR})
install(FILES ${CONFIG_DEFAULT_OUTPUT} DESTINATION Recorder/${OpenGLES_INSTALL_SUBDIR})
if(WITH_OPENCL)
  install(FILES ${CONFIG_COMPUTE_DEFAULT_OUTPUT} DESTINATION Recorder/${OpenCL_INSTALL_SUBDIR})
endif()
if(WITH_VULKAN)
  install(FILES ${CONFIG_DEFAULT_OUTPUT} DESTINATION Recorder/${Vulkan_INSTALL_SUBDIR})
  install(FILES ${CONFIG_DEFAULT_OUTPUT} DESTINATION Recorder/${VulkanLayer_INSTALL_SUBDIR})
endif()
if(WITH_LEVELZERO)
  install(FILES ${CONFIG_COMPUTE_DEFAULT_OUTPUT} DESTINATION Recorder/${L0_INSTALL_SUBDIR})
endif()
if(WITH_DIRECTX)
  install(FILES ${CONFIG_DEFAULT_OUTPUT} DESTINATION Recorder/${DIRECTX_INSTALL_SUBDIR})
endif()

install(FILES ${CONFIG_DEFAULT_OUTPUT} DESTINATION Player)
