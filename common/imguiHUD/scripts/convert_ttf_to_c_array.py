# ===================== begin_copyright_notice ============================
#
# Copyright (C) 2023-2025 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# ===================== end_copyright_notice ==============================

# This script converts a TTF font file into a C array format suitable for embedding in C code.

import sys
import os
import argparse
from typing import List


def convert_ttf_to_c_array(file_path: str) -> str:
    """Convert a TTF file to a C array format."""
    try:
        with open(file_path, "rb") as f:
            byte_array = f.read()
    except IOError as e:
        print(f"Error reading file {file_path}: {e}")
        sys.exit(1)

    # Use a list to accumulate byte strings for efficiency
    c_array: List[str] = [f'0x{b:02x}' for b in byte_array]
    c_array_str = ', '.join(c_array)
    return f"unsigned char font_data[] = {{ {c_array_str} }};\nunsigned int font_data_size = {len(byte_array)};\n"


def main():
    parser = argparse.ArgumentParser(
        description="Convert TTF font file to C array format.")
    parser.add_argument("input_file", help="Path to the input TTF file")
    parser.add_argument("output_file", help="Path to the output C header file")
    args = parser.parse_args()

    if not os.path.exists(args.input_file):
        print(f"Error: The file {args.input_file} does not exist.")
        sys.exit(1)

    c_code = convert_ttf_to_c_array(args.input_file)
    output_file_name = args.output_file if args.output_file.endswith(
        '.h') else f"{os.path.splitext(args.output_file)[0]}.h"

    try:
        with open(output_file_name, "w") as f:
            f.write("// This file is auto-generated from a TTF font file.\n")
            f.write("// Do not edit this file manually.\n\n")
            f.write("#pragma once\n")
            f.write("namespace gits {\n")
            f.write("namespace Font {\n")
            f.write(c_code)
            f.write("} // namespace Font\n")
            f.write("} // namespace gits\n")
    except IOError as e:
        print(f"Error writing to file {output_file_name}: {e}")
        sys.exit(1)

    print(f"Converted {args.input_file} to {output_file_name}")


if __name__ == "__main__":
    main()
